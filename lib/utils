#!/bin/bash

# File/directory check shortcuts
f_ex() { [ -f "$1" ]; }
f_no() { [ ! -f "$1" ]; }
d_ex() { [ -d "$1" ]; }
d_no() { [ ! -d "$1" ]; }
# Directory operations
d_make() { mkdir -p "$1"; }

# Path utilities
p_dir() { dirname "$1"; }
p_name() { basename "$1"; }

# String utilities
s_empty() { [ -z "$1" ]; }
s_has() { [[ "$1" == *"$2"* ]]; }
s_true() { [[ "$1" == "true" ]]; }
s_false() { [[ "$1" != "true" ]]; }
s_set() { [[ -n "$1" ]]; }
s_random() { head /dev/urandom | tr -dc "${2:-A-Z0-9a-z}" | head -c "${1:-6}"; }
s_inpath() {
    case ":$PATH:" in
        *":$1:"*) return 0 ;;
        *) return 1 ;;
    esac
}

# Path utilities for script locations
p_script() { p_dir "$0"; }
p_bin() { echo "${HOME}${BIN_PATH}/${APP}"; }
p_binlib() { echo "${HOME}${BIN_PATH}/${APP}-lib"; }

# File operations with safety
f_read() { cat "$1" 2>/dev/null || echo "${2:-}"; }
f_remove() { rm -f "$1"; }
f_exec() { chmod +x "$1"; }

# Git operations
g_repo() { p_name "$(git rev-parse --show-toplevel)"; }
g_check() { git rev-parse --git-dir >/dev/null 2>&1; }
g_last() { git log -1 --format="%h - %s" 2>/dev/null || echo "No previous commits"; }
g_add() { git add .; }
g_status() { git -c advice.statusHints=false status; }
g_staged() { git diff --staged --quiet; }

# Time utilities
t_date() { date "${1:-+%m-%d}"; }
t_timestamp() { date +%s%3N; }

# User interaction
u_confirm() {
    read -p "${1:-Continue?} [y/N] " confirm
    [[ "$confirm" =~ ^[Yy]$ ]]
}

# Numeric operations
n_safe() { echo $(($1 + 0)) 2>/dev/null || echo "${2:-0}"; }
n_pad() { printf "%0${2:-3}d" "$1"; }

# Requirement utilities
r_sudo() { [ -n "$SUDO_USER" ];info "Current sudo user: $SUDO_USER" || die "This script requires sudo privileges"; }
r_root() { [ "$(id -u)" -eq 0 ] || die "This script must be run as root"; }
r_user() { [ "$(id -u)" -ne 0 ] || die "This script must not be run as root"; }
r_sudo_c() { sudo -k;info "Cleared sudo cache" || die "Sudo credentials required"; }
r_sudo_p() { sudo -v; }
r_sudo_v() { sudo -n true 2>/dev/null; }
